**** Global Variables                                          ****
Dim magnitude As Int
Dim magnitudelimit As Int = 120
Dim MAGNITUDELIMIT_LOW As Int = 100
Dim LOW As String = "0"
Dim HIGH As String = "1"
Dim realstate As String = LOW     'HIGH/LOW
Dim realstatebefore As String = LOW 'HIGH/LOW	
Dim filteredstate As String = LOW 'HIGH/LOW
Dim filteredstatebefore As String = LOW 'HIGH/LOW

Dim  coeff As Float
Dim  Q1 = 0 As Float
Dim  Q2 = 0 As Float
Dim cosines As Float
Dim grtz_sampling_freq
Dim target_freq
Dim grtz_nr_sampl

Dim nbtime As Int = 6 ' ms noise blanker

Dim starttimehigh As Long
Dim highduration As Long
Dim lasthighduration As Long
Dim hightimesavg As Long
Dim lowtimesavg As Long
Dim startttimelow As Long
Dim lowduration As Long
Dim laststarttime  As Long = 0
	
Dim code  As String
Dim letter As String
Dim space As Boolean
Dim new_char_available As Boolean
Dim letters_length As Int =1
	
Dim stop As String  = LOW 'HIGH/LOW
Dim wpm As Int
Dim pi As Int = 3.14159

**** Calculating the Goertzell coeff, only once for             ****
**** sampling_frequency ,target frequency and number of samples ****
**** Now the coeff can be used in the decoding algoritme        ****                          
Sub Dogrtz
	Dim k As Int : Dim omega As Float
	grtz_sampling_freq=8000 : target_freq=500 :grtz_nr_sampl=32 
	k = (0.5 + ((grtz_nr_sampl * target_freq) / grtz_sampling_freq)) 
	omega = (2.0 * pi * k) / grtz_nr_sampl'pi *
	cosines = Cos(omega) : coeff = 2.0 * cosines
End sub 


**** Decoding sub android  with  millis.NanoTime timer          ****

Sub Morse_decode
	If ar.GetRecordingState = 3 Then Log("FreqDetect State = Start Recording")
	Dim sound(ar_buf_size) As Short
	Dim test,i As Int
	Dim Q0,magnitudesquared,lacktime As Float
	MAGNITUDELIMIT_LOW=100
	
	
	Dogrtz
    Wait(1000)
	Do While test <> 1 
	
		If Record.IsInterrupted Then Exit
		
		'*** HERE WE GET THE TONE ***
		sound = ar.Readshort(0,grtz_nr_sampl)
		For i = 0 To grtz_nr_sampl - 1
			Q0 = coeff * Q1 - Q2 + sound(i)
			Q2 = Q1
			Q1 = Q0
		Next
		magnitudesquared = (Q1*Q1)+(Q2*Q2)-Q1*Q2*coeff '
		magnitude = Sqrt(magnitudesquared)
		Q2 = 0 : Q1 = 0
		If (magnitude > MAGNITUDELIMIT_LOW) Then
			magnitudelimit = (magnitudelimit + ((magnitude - magnitudelimit)/6))'
		End If
		
		If (magnitudelimit < MAGNITUDELIMIT_LOW) Then magnitudelimit = MAGNITUDELIMIT_LOW

		If(magnitude > magnitudelimit*1) Then 
	        realstate = HIGH
		Else
			realstate = LOW
		End If

                '*** Decoding          ***
		If (realstate <> realstatebefore) Then
			laststarttime = millis.NanoTime
		End If
		'
		If ((millis.NanoTime-laststarttime) > 6000000) Then '6ms
			If (realstate <> filteredstate) Then
				filteredstate = realstate
			End If
		End If
			
		
		If (filteredstate <> filteredstatebefore)Then
			If (filteredstate = HIGH) Then
				starttimehigh = millis.NanoTime
				lowduration = (millis.NanoTime - startttimelow) 
		
			End If
	   
			If (filteredstate = LOW) Then
				startttimelow = millis.NanoTime
				highduration = (millis.NanoTime - starttimehigh) 
			
				If (highduration < (2*hightimesavg) Or hightimesavg = 0) Then
					hightimesavg = (highduration + hightimesavg + hightimesavg)/3
					
				End If
				If (highduration > (5*hightimesavg) ) Then
					hightimesavg = highduration+hightimesavg 
				End If
			End If
		End If
		
	
		If (filteredstate <>  filteredstatebefore) Then
			stop = LOW
			If (filteredstate = LOW) Then ' 
				If (highduration < (hightimesavg*2) And highduration > (hightimesavg*0.6)) Then
				
					code = code & (".")
					'Log(".")
				End If
	 
				If (highduration > (hightimesavg*2) And highduration < (hightimesavg*6)) Then
					
					code=code & ("-")
					'Log("-")
	
					wpm = (wpm + (1200/((highduration/1000000)/3)))/2 
				
				End If
			End If
	  
			If (filteredstate = HIGH) Then 
				lacktime = 1
				If(wpm > 25) Then lacktime=1.0 
				If(wpm > 30) Then lacktime=1.2 
				If(wpm > 35) Then lacktime=1.5 
				If(wpm > 40) Then lacktime=1.8 
				If(wpm > 45) Then lacktime=1.8 

				'// letter space
				If (lowduration > (hightimesavg*(2*lacktime)) And lowduration < hightimesavg*(5*lacktime)) Then
					docode
					code ="" 
					'Log("/")
				End If
	  
				'// word space
				If (lowduration >= hightimesavg*(5*lacktime)) Then '// word space
					docode
					code =""
					space =True
					Log(" ")
		
				End If
			End If
		End If

		
		
		If ((millis.NanoTime - startttimelow) > (highduration * 6) And stop = LOW) Then
			
			stop = HIGH
		End If
		
	
		realstatebefore = realstate
		lasthighduration = highduration
		filteredstatebefore = filteredstate
	 Loop
End Sub




